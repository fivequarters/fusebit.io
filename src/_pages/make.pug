extends ../_layouts/default.pug

block seo_variables
    - var title = 'Make - Fusebit'

block page_variable
    - var pageClass = 'make'

block content
    section.make
        .make__container
            .make__error.make__invisible
                h1 Oops!
                p#errorMessage There was a problem
                p 
                 | But hey, you can still explore other integrations you can build with Fusebit
                 a(href="/integrations/") here.
            .make__wrapper
                .make__titleWrapper
                    h1 Let's create a integration!
                    .make__titleWrapper--flex
                        img.make__titleWrapper--image
                .make__descriptionWrapper
                    p.make__descriptionWrapper--text With just a few lines of code, you will be able to:
                    div
                        .make__descriptionWrapper--snippet 
                            img.make__descriptionWrapper--snippet-img(src="../../../assets/images/check.svg")
                            .make__descriptionWrapper--snippet-feature Sends a message to slack
                        .make__descriptionWrapper--snippet 
                            img.make__descriptionWrapper--snippet-img(src="../../../assets/images/check.svg")
                            .make__descriptionWrapper--snippet-feature Receives a message from slack
                    p.make__descriptionWrapper--text.make__descriptionWrapper--marginTop Log in or create a free Fusebit account to get started!
                    +cta("Create", null, "make__button", "create", null, null, null, true)




block scripts
    script.

        const initData = (snippets, connectors, error) => {
            if (error) {
                const messageElement = document.getElementById("errorMessage");
                messageElement.innerText = `There was a problem: ${error}`;
                const errorWrapper = document.querySelector(".make__error");
                const makeWrapper = document.querySelector(".make__wrapper");
                makeWrapper.classList.add("make__invisible");
                errorWrapper.classList.remove("make__invisible");
            }
        }

        const func = async () => {
            let error;
            const snippetArray = [];
            const connectorMap = {};
            const uniqueConnectors = [];

            const snippets = searchParams.get("query").replace(" ", "+");
            const snippetIds = snippets.split('+').map((s) => {
                const segments = s.split('-');
                const connectorId = segments.shift();
                return { connectorId, snippetId: segments.join('-') };
            });

            const connectorsPromise = await fetch(
                `http://localhost:8080/feed/connectorsFeed.json`,
            );
            const connectors = (await connectorsPromise.json()).filter((i) => !i.private && i.snippets);

            for (let i = 0; i < snippetIds.length; i++) {
                const connector = connectors.find((c) => c.id === snippetIds[i].connectorId);
                if (!connector) {
                    error = `The '${snippetIds[i].connectorId}' connector was not found.`;
                    break;
                }
                const snippet = connector.snippets?.find((s) => s.id === snippetIds[i].snippetId);
                if (!snippet) {
                    error = `The '${snippetIds[i].snippetId}' snippet of the '${snippetIds[i].connectorId}' connector was not found.`;
                    break;
                }
                if (!connectorMap[connector.id]) {
                    connectorMap[connector.id] = true;
                    uniqueConnectors.push(connector);
                }
                snippetArray.push({ connector, snippet });
            }

            initData("", "", "asd");
        }

        func();

        
