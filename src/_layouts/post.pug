extends default.pug

block page_variable
    - const ogConfig = { hero: `${site.url}${filters.getImageUrl(`blog/${post_image}`, 900)}`, site: og_image }
    - var pageClass = 'blog__page'
    - var title = post_title
    - var slug = post_slug
    - var description = post_excerpt
    - var og_image = typeof post_og_image !== "undefined" ? ogConfig[post_og_image] || post_og_image : ogConfig.hero

block content
    section.section
        .background.background--neutralLight
        .background.background--straight.background--neutralLight
        .layout.post__hero-layout
            .post__info
                each author, i in (post_authors || [])
                    .post__author
                        if author.avatar
                            img(src= author.avatar width="50" height="50")
                        span.post__author-name #{author.name}
                    if i !== post_authors.length - 1
                        .post__info-divider

                if !(post_authors || []).length
                    .post__author
                        if post_author_avatar
                            img(src= post_author_avatar width="50" height="50")
                        span.post__author-name #{post_author}
                        
                .post__info-divider
                span.post__date= `${filters.format(new Date(date.replace('-', '/')), 'd MMMM yyyy')}`
            h1 #{post_title}
            - const postTags = tags.filter(tag => tag !== 'post')
            if postTags.length > 0
                .post__tags
                    img(src='/assets/images/tag.svg' alt="Tag") 
                    div 
                        each t, index in postTags
                            a.post__tag(href= `/blog/tags/${t}/`) #{t}
                            if index + 1 === postTags.length - 1
                                | #{' & '} 
                            else if index + 1 < postTags.length - 1
                                | #{', '}
    section.section.section--overflow.section--no-margin
        .background.background--white
        .layout.post__content-layout.layout--no-padding-bottom
            .post__content
                .post__hero-image
                    != filters.getImageTag(`blog/${post_image}`, 'Hero Image', null, { id:"hero-image" })
                article.article
                    .post__sidebar
                        .post__sidebar--toc-wrapper
                            h5.post__sidebar--title Table of contents
                            .post__sidebar--sections
                            .post__sidebar--separator
                            .post__sidebar--section Related Posts

                    .post__article!= content
            .post__navigation-container
                - const prevPost = filters.getNextCollectionItem(collections.post, page) || null
                - const nextPost = filters.getPreviousCollectionItem(collections.post, page) || null
                hr
                .post__navigation-buttons 
                    if prevPost
                        a.post__navigation-button.post__navigation-button--left(href= prevPost.url) 
                            img(src='/assets/images/arrow--left.svg' alt="Arrow")
                            | Previous
                            .post__navigation-button-underline

                    if nextPost 
                        a.post__navigation-button.post__navigation-button--right(href= nextPost.url)
                            | Next
                            img(src='/assets/images/arrow--left.svg' alt="Arrow")
                            .post__navigation-button-underline
    section
        if posts_related
            .layout.post__trending-layout
                h2 Related Content
                .post-card-container.post__trending-list
                    each relatedPost in posts_related
                        each post in [...collections.post].filter((post) => post.data.post_slug === relatedPost).slice(0, 3)
                            +postCard(post.url, post.data.post_image, post.data.date, post.data.post_title, post.data.post_excerpt)
        else 
            .layout.post__trending-layout
                h2 Most Recent
                .post-card-container.post__trending-list
                    each post in [...collections.post].filter((post) => post.data.post_slug !== slug).reverse().slice(0, 3)
                        +postCard(post.url, post.data.post_image, post.data.date, post.data.post_title, post.data.post_excerpt)

block scripts
    script.
        analytics.page('Blog Post', { objectLocation: 'Blog Post', domain: 'fusebit.io' });

        function animateCopy(evt) {
            if (evt.target.classList.value.indexOf("copied") < 0) {
                evt.target.innerHTML = "Copied!";
                evt.target.classList.add("copied");
                setTimeout(function() { 
                    evt.target.innerHTML = "Copy";
                    evt.target.classList.remove("copied");
                }, 2000);
            }
        }

        function handleCopyClick(evt) {
            const { children } = evt.target.parentElement;
            const { innerText } = Array.from(children)[0];
            navigator.clipboard.writeText(innerText);
            animateCopy(evt);
        }
    
        const highlights = document.querySelectorAll("pre");

        highlights.forEach(codeBlock => {
            const copy = document.createElement("button");
            copy.innerHTML = "Copy";
            copy.addEventListener("click", handleCopyClick);
            codeBlock.append(copy);
            codeBlock.addEventListener("scroll", (e) => {
                const scrollLeft = e.currentTarget.scrollLeft;
                const copyButton = codeBlock.querySelector("button");
                copyButton.style.transform = `translateX(${scrollLeft}px)`;
            });
        });
        
        const links = document.querySelectorAll('a');
        links.forEach((link) => {
            const title = link.title;
            if (title.indexOf("CTA") > 0) {
                const buttonSize = title.indexOf("SMALL") > 0 ? "Small" : "Large";
                
                analytics.trackLink(link, "Blog Post Button Clicked", {
                    objectLocation: "Blog",
                    domain: 'fusebit.io',
                    buttonSize,
                });
            }
        });

        const children = document.querySelector(".post__article")?.childNodes;
        const sidebar = document.querySelector(".post__sidebar--sections");
        for (child in children) {
            const element = children[child];
            if (element?.nodeName?.includes("H")) {
                console.log(element);
                const section = document.createElement("div");
                section.innerHTML = element.innerHTML;
                section.classList.add("post__sidebar--section");
                if (sidebar.childElementCount < 1) {
                    section.classList.add("post__sidebar--section-active");
                } 
                sidebar.append(section);
            }
        }

