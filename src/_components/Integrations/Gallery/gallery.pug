mixin item(img, name, outOfPlan, id, catalog, hidden, description)
    .gallery__item-container(class=hidden ? 'show-more-item--hidden show-more-item--hidden-out show-more-item--hidden-animation' : '' class="show-more-item" data-catalog= catalog id= id)
        .gallery__item-container-logo
            img(src=`data:image/svg+xml;utf8,${encodeURIComponent(img)}`)
        div
            p.gallery__item-container-title= name
            .gallery__item-container-integration-wrapper
                .gallery__item-container-integration-icon-wrapper
                    .gallery__item-container-logo
                        img(src=`data:image/svg+xml;utf8,${encodeURIComponent(img)}`)
                    p.gallery__item-container-title= name
                h4.gallery__item-container-integration-title Build a #{name} integration for your customers in minutes
                p.gallery__item-container-integration-description #{description}
            if outOfPlan
                button.gallery__item-container-cta(onclick=`window.Intercom('showNewMessage', "I'm interested in enabling ${name}")` data-event-name="Try Integration Button Clicked" data-object-location="Integrations" data-integration= id, data-integration-type="Fake") Try Integration
            else
                a.gallery__item-container-cta.gallery__item-container-cta-filled.track-with-segment(href= `${site.portalBaseUrl}/signup?key=${id}` data-event-name="Try Integration Button Clicked" data-object-location="Integrations" data-integration= id, data-integration-type="Real") Try Integration
                a.gallery__item-container-cta.track-with-segment(href= `/integrations/${id}` data-event-name="More Button Clicked" data-object-location="Integrations" data-integration= id) More

section.section
    .layout.gallery__layout
        .gallery__header
            +title('Integration ', 'gallery', false, true, 'gallery__title')
            +dropdown(integrationCategories.map(category => ({
                id: category,
                label: category
            })), "categories", "Category: ")
        .gallery__grid.gallery__hidden
            each i in integrations
                +item(i.logo, i.name, i.outOfPlan, i.id, i.catalog, false, i.description.split("[")[0])        
        .gallery__grid
            - const buildAmount = 12
            - let showMoreButton = false
            each i, index in integrations
                if index >= buildAmount
                    - showMoreButton = true
                +item(i.logo, i.name, i.outOfPlan, i.id, i.catalog, index >= buildAmount)
        if showMoreButton
            button.gallery__pagination-button#more More
    .background.background--white
        .mark.mark--small.mark--dark-violet.mark--right.mark--bottom
        .mark.mark--small.mark--dark-violet.mark--left.gallery__mark-top
        .mark.mark--big.mark--light-violet.mark--right.mark--bottom.gallery__mark-bottom.gallery__mark-bottom-mobile
    script.
        let runtimeAmount = 12;

        window.addEventListener('load', async () => {
            const integration = new URLSearchParams(window.location.search).get("i");

            if (integration) {
                const galleries = document.querySelectorAll(".gallery__grid");
                const showMoreButton = document.getElementById("more");
                const itemToChange = document.getElementById(integration);
                const specificGallery = galleries[0];
                const commonGallery = galleries[1];

                commonGallery.remove();
                specificGallery.classList.remove("gallery__hidden");
                showMoreButton.classList.add("gallery__hidden");

                const titles = itemToChange.querySelectorAll(".gallery__item-container-title");
                const firstLogo = itemToChange.querySelector(".gallery__item-container-logo");
                const integrationDescriptionWrapper = itemToChange.querySelector(".gallery__item-container-integration-wrapper");
                
                itemToChange.classList.add("gallery__item-container-selected");
                firstLogo.remove();
                titles[0].remove();
                titles[1].classList.add("gallery__item-container-title-selected");
                integrationDescriptionWrapper.style.display = "block";

                setTimeout(() => {
                    // wait for the changes above to take effect
                    runtimeAmount = undefined; // to make the handleShowMore func slice to the last element of the items
                    itemToChange.scrollIntoView();
                }, 500);
            } else {
                const galleries = document.querySelectorAll(".gallery__grid");
                const specificGallery = galleries[0];
                specificGallery.remove();
            }

            handleShowMore({
                amount: runtimeAmount,
                elements: ".show-more-item--hidden[data-catalog]",
                showMoreId: "more",
            })

            const dropdown = new Dropdown("categories", (id) => {
                document.querySelectorAll(".gallery__item-container").forEach((el, i) => {
                    el.classList.add('show-more-item--hidden', 'show-more-item--hidden-animation');

                    if(!el.dataset.catalog.includes(id)) {
                        el.classList.add('show-more-item--hidden-out');
                    }
                });

                document.querySelector("#more").style.display = "none";

                const selector = id === "All" ? "" : `*="${id}"`

                handleShowMore({
                    amount: runtimeAmount,
                    elements: `.show-more-item--hidden[data-catalog${selector}]`,
                    showMoreId: "more",
                    force: true
                })
            })

            dropdown.init()

            const comingSoonButtons = document.querySelectorAll('.gallery__item-container-cta--disabled')

            for (let i = 0; i < comingSoonButtons.length; i++) {
                comingSoonButtons[i].addEventListener('click', (e) => {
                    const { eventName, ...rest } = { ...e.target.dataset };
                    analytics.track({
                        event: eventName,
                        properties: {
                            domain: 'fusebit.io',
                            ...rest
                        }
                    });
                })
            }
        })
